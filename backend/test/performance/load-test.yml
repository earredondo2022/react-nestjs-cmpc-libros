# Artillery Load Testing Configuration
config:
  target: 'http://localhost:3001'
  processor: "./processor.js"
  
  # Performance monitoring and thresholds
  ensure:
    p95: 1000  # 95th percentile response time under 1000ms
    p99: 2000  # 99th percentile response time under 2000ms
    maxErrorRate: 1  # Maximum error rate 1%
  
  phases:
    # Warm-up phase
    - duration: 30
      arrivalRate: 1
      name: "Warm up"
    
    # Ramp up phase
    - duration: 60
      arrivalRate: 5
      rampTo: 20
      name: "Ramp up load"
    
    # Sustained load phase
    - duration: 120
      arrivalRate: 20
      name: "Sustained load"
    
    # Peak load phase
    - duration: 60
      arrivalRate: 50
      name: "Peak load"
    
    # Cool down phase
    - duration: 30
      arrivalRate: 5
      name: "Cool down"

  variables:
    testUserEmail: "loadtest@example.com"
    testUserPassword: "password123"

  defaults:
    headers:
      Content-Type: "application/json"

scenarios:
  # Authentication flow test
  - name: "Authentication Flow"
    weight: 30
    flow:
      - post:
          url: "/auth/login"
          json:
            email: "{{ testUserEmail }}"
            password: "{{ testUserPassword }}"
          capture:
            - json: "$.access_token"
              as: "authToken"
          expect:
            - statusCode: 201
      
      - get:
          url: "/auth/profile"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200

  # Books CRUD operations test
  - name: "Books API Performance"
    weight: 50
    flow:
      # Login first
      - post:
          url: "/auth/login"
          json:
            email: "{{ testUserEmail }}"
            password: "{{ testUserPassword }}"
          capture:
            - json: "$.access_token"
              as: "authToken"
      
      # Get all books
      - get:
          url: "/books"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
      
      # Get books with pagination
      - get:
          url: "/books?page=1&limit=10"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
      
      # Search books
      - get:
          url: "/books/search?q=test"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
      
      # Get specific book (if exists)
      - function: "getRandomBookId"
      - get:
          url: "/books/{{ bookId }}"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: [200, 404]

  # Database-intensive operations test
  - name: "Heavy Database Operations"
    weight: 20
    flow:
      # Login
      - post:
          url: "/auth/login"
          json:
            email: "{{ testUserEmail }}"
            password: "{{ testUserPassword }}"
          capture:
            - json: "$.access_token"
              as: "authToken"
      
      # Export CSV (heavy operation)
      - get:
          url: "/books/export/csv"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200
      
      # Complex search with filters
      - get:
          url: "/books?search=fiction&page=1&limit=50"
          headers:
            Authorization: "Bearer {{ authToken }}"
          expect:
            - statusCode: 200